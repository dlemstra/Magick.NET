// Copyright Dirk Lemstra https://github.com/dlemstra/Magick.NET.
// Licensed under the Apache License, Version 2.0.
// <auto-generated/>
#nullable enable

using System;
using System.Security;
using System.Runtime.InteropServices;

namespace ImageMagick;

public partial class QuantizeSettings
{
    [SuppressUnmanagedCodeSecurity]
    private static unsafe class NativeMethods
    {
        #if PLATFORM_x64 || PLATFORM_AnyCPU
        public static class X64
        {
            [DllImport(NativeLibrary.X64Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr QuantizeSettings_Create();
            [DllImport(NativeLibrary.X64Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_Dispose(IntPtr instance);
            [DllImport(NativeLibrary.X64Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_SetColors(IntPtr Instance, UIntPtr value);
            [DllImport(NativeLibrary.X64Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_SetColorSpace(IntPtr Instance, UIntPtr value);
            [DllImport(NativeLibrary.X64Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_SetDitherMethod(IntPtr Instance, UIntPtr value);
            [DllImport(NativeLibrary.X64Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_SetMeasureErrors(IntPtr Instance, [MarshalAs(UnmanagedType.Bool)] bool value);
            [DllImport(NativeLibrary.X64Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_SetTreeDepth(IntPtr Instance, UIntPtr value);
        }
        #endif
        #if PLATFORM_arm64 || PLATFORM_AnyCPU
        public static class ARM64
        {
            [DllImport(NativeLibrary.ARM64Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr QuantizeSettings_Create();
            [DllImport(NativeLibrary.ARM64Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_Dispose(IntPtr instance);
            [DllImport(NativeLibrary.ARM64Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_SetColors(IntPtr Instance, UIntPtr value);
            [DllImport(NativeLibrary.ARM64Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_SetColorSpace(IntPtr Instance, UIntPtr value);
            [DllImport(NativeLibrary.ARM64Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_SetDitherMethod(IntPtr Instance, UIntPtr value);
            [DllImport(NativeLibrary.ARM64Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_SetMeasureErrors(IntPtr Instance, [MarshalAs(UnmanagedType.Bool)] bool value);
            [DllImport(NativeLibrary.ARM64Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_SetTreeDepth(IntPtr Instance, UIntPtr value);
        }
        #endif
        #if PLATFORM_x86 || PLATFORM_AnyCPU
        public static class X86
        {
            [DllImport(NativeLibrary.X86Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern IntPtr QuantizeSettings_Create();
            [DllImport(NativeLibrary.X86Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_Dispose(IntPtr instance);
            [DllImport(NativeLibrary.X86Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_SetColors(IntPtr Instance, UIntPtr value);
            [DllImport(NativeLibrary.X86Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_SetColorSpace(IntPtr Instance, UIntPtr value);
            [DllImport(NativeLibrary.X86Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_SetDitherMethod(IntPtr Instance, UIntPtr value);
            [DllImport(NativeLibrary.X86Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_SetMeasureErrors(IntPtr Instance, [MarshalAs(UnmanagedType.Bool)] bool value);
            [DllImport(NativeLibrary.X86Name, CallingConvention = CallingConvention.Cdecl)]
            public static extern void QuantizeSettings_SetTreeDepth(IntPtr Instance, UIntPtr value);
        }
        #endif
    }
    private unsafe sealed partial class NativeQuantizeSettings : NativeInstance
    {
        static NativeQuantizeSettings() { Environment.Initialize(); }
        protected override void Dispose(IntPtr instance)
        {
            #if PLATFORM_AnyCPU
            if (Runtime.IsArm64)
            #endif
            #if PLATFORM_arm64 || PLATFORM_AnyCPU
            NativeMethods.ARM64.QuantizeSettings_Dispose(instance);
            #endif
            #if PLATFORM_AnyCPU
            else if (Runtime.Is64Bit)
            #endif
            #if PLATFORM_x64 || PLATFORM_AnyCPU
            NativeMethods.X64.QuantizeSettings_Dispose(instance);
            #endif
            #if PLATFORM_AnyCPU
            else
            #endif
            #if PLATFORM_x86 || PLATFORM_AnyCPU
            NativeMethods.X86.QuantizeSettings_Dispose(instance);
            #endif
        }
        public NativeQuantizeSettings()
        {
            #if PLATFORM_AnyCPU
            if (Runtime.IsArm64)
            #endif
            #if PLATFORM_arm64 || PLATFORM_AnyCPU
            Instance = NativeMethods.ARM64.QuantizeSettings_Create();
            #endif
            #if PLATFORM_AnyCPU
            else if (Runtime.Is64Bit)
            #endif
            #if PLATFORM_x64 || PLATFORM_AnyCPU
            Instance = NativeMethods.X64.QuantizeSettings_Create();
            #endif
            #if PLATFORM_AnyCPU
            else
            #endif
            #if PLATFORM_x86 || PLATFORM_AnyCPU
            Instance = NativeMethods.X86.QuantizeSettings_Create();
            #endif
            if (Instance == IntPtr.Zero)
                throw new InvalidOperationException();
        }
        protected override string TypeName
        {
            get
            {
                return nameof(QuantizeSettings);
            }
        }
        public void SetColors(int value)
        {
            #if PLATFORM_AnyCPU
            if (Runtime.IsArm64)
            #endif
            #if PLATFORM_arm64 || PLATFORM_AnyCPU
            NativeMethods.ARM64.QuantizeSettings_SetColors(Instance, (UIntPtr)value);
            #endif
            #if PLATFORM_AnyCPU
            else if (Runtime.Is64Bit)
            #endif
            #if PLATFORM_x64 || PLATFORM_AnyCPU
            NativeMethods.X64.QuantizeSettings_SetColors(Instance, (UIntPtr)value);
            #endif
            #if PLATFORM_AnyCPU
            else
            #endif
            #if PLATFORM_x86 || PLATFORM_AnyCPU
            NativeMethods.X86.QuantizeSettings_SetColors(Instance, (UIntPtr)value);
            #endif
        }
        public void SetColorSpace(ColorSpace value)
        {
            #if PLATFORM_AnyCPU
            if (Runtime.IsArm64)
            #endif
            #if PLATFORM_arm64 || PLATFORM_AnyCPU
            NativeMethods.ARM64.QuantizeSettings_SetColorSpace(Instance, (UIntPtr)value);
            #endif
            #if PLATFORM_AnyCPU
            else if (Runtime.Is64Bit)
            #endif
            #if PLATFORM_x64 || PLATFORM_AnyCPU
            NativeMethods.X64.QuantizeSettings_SetColorSpace(Instance, (UIntPtr)value);
            #endif
            #if PLATFORM_AnyCPU
            else
            #endif
            #if PLATFORM_x86 || PLATFORM_AnyCPU
            NativeMethods.X86.QuantizeSettings_SetColorSpace(Instance, (UIntPtr)value);
            #endif
        }
        public void SetDitherMethod(DitherMethod value)
        {
            #if PLATFORM_AnyCPU
            if (Runtime.IsArm64)
            #endif
            #if PLATFORM_arm64 || PLATFORM_AnyCPU
            NativeMethods.ARM64.QuantizeSettings_SetDitherMethod(Instance, (UIntPtr)value);
            #endif
            #if PLATFORM_AnyCPU
            else if (Runtime.Is64Bit)
            #endif
            #if PLATFORM_x64 || PLATFORM_AnyCPU
            NativeMethods.X64.QuantizeSettings_SetDitherMethod(Instance, (UIntPtr)value);
            #endif
            #if PLATFORM_AnyCPU
            else
            #endif
            #if PLATFORM_x86 || PLATFORM_AnyCPU
            NativeMethods.X86.QuantizeSettings_SetDitherMethod(Instance, (UIntPtr)value);
            #endif
        }
        public void SetMeasureErrors(bool value)
        {
            #if PLATFORM_AnyCPU
            if (Runtime.IsArm64)
            #endif
            #if PLATFORM_arm64 || PLATFORM_AnyCPU
            NativeMethods.ARM64.QuantizeSettings_SetMeasureErrors(Instance, value);
            #endif
            #if PLATFORM_AnyCPU
            else if (Runtime.Is64Bit)
            #endif
            #if PLATFORM_x64 || PLATFORM_AnyCPU
            NativeMethods.X64.QuantizeSettings_SetMeasureErrors(Instance, value);
            #endif
            #if PLATFORM_AnyCPU
            else
            #endif
            #if PLATFORM_x86 || PLATFORM_AnyCPU
            NativeMethods.X86.QuantizeSettings_SetMeasureErrors(Instance, value);
            #endif
        }
        public void SetTreeDepth(int value)
        {
            #if PLATFORM_AnyCPU
            if (Runtime.IsArm64)
            #endif
            #if PLATFORM_arm64 || PLATFORM_AnyCPU
            NativeMethods.ARM64.QuantizeSettings_SetTreeDepth(Instance, (UIntPtr)value);
            #endif
            #if PLATFORM_AnyCPU
            else if (Runtime.Is64Bit)
            #endif
            #if PLATFORM_x64 || PLATFORM_AnyCPU
            NativeMethods.X64.QuantizeSettings_SetTreeDepth(Instance, (UIntPtr)value);
            #endif
            #if PLATFORM_AnyCPU
            else
            #endif
            #if PLATFORM_x86 || PLATFORM_AnyCPU
            NativeMethods.X86.QuantizeSettings_SetTreeDepth(Instance, (UIntPtr)value);
            #endif
        }
    }
    internal static INativeInstance CreateInstance(IQuantizeSettings instance)
    {
        return QuantizeSettings.CreateNativeInstance(instance);
    }
}
